# -*- coding: utf-8 -*-
"""stockPredictorLSTM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RfyEl_C181RhOdS9rx_EIab6mk-8bI5u
"""

import math
import pandas_datareader as web
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt

plt.style.use("fivethirtyeight")

dataFrame = web.DataReader("AAPL", data_source = "yahoo", start = "2012-01-01", end = "2019-12-25")

dataFrame.shape

plt.figure(figsize=(15,10))
plt.title("Close History")
plt.plot(dataFrame["Close"])
plt.xlabel("Data")
plt.ylabel("Closing Price")

dataFrameClose = dataFrame.filter(["Close"])
dataFrameCloseNP = dataFrameClose.values
trainDataLength = math.ceil(len(dataFrameCloseNP)*.8)

scaler = MinMaxScaler(feature_range=(0,1))
dataScaled = scaler.fit_transform(dataFrameCloseNP)

trainingData = dataScaled[0:trainDataLength,:]
xTrain = []
yTrain = []

for i in range (60, len(trainingData)):
  xTrain.append(trainingData[i-60:i,0])
  yTrain.append(trainingData[i,0])
  
  # if i <= 61:
  #   print (xTrain)
  #   print (yTrain)
  #   print()

xTrain, yTrain = np.array(xTrain), np.array(yTrain)

xTrain = np.reshape(xTrain, (xTrain.shape[0], xTrain.shape[1], 1))
xTrain.shape

LSTmodel = Sequential()
LSTmodel.add(LSTM(50, return_sequences = True, input_shape=(xTrain.shape[1],1 )))
LSTmodel.add(LSTM(50, return_sequences = False))
LSTmodel.add(Dense(25))
LSTmodel.add(Dense(1))

LSTmodel.compile(optimizer = 'adam', loss = 'mean_squared_error')

LSTmodel.fit(xTrain,yTrain,batch_size=1, epochs=1)

testDataSet = dataScaled[trainDataLength - 60: , :]
xTest = []
yTest = dataFrameCloseNP[trainDataLength:,:]

for i in range (60,len(testDataSet)):
  xTest.append(testDataSet[i-60:i,0])

xTest = np.array(xTest)
xTest = np.reshape(xTest,(xTest.shape[0], xTest.shape[1], 1))

predicitonValues = LSTmodel.predict(xTest)
predictionValues = scaler.inverse_transform(predicitonValues)
rmse = np.sqrt(np.mean(predictionValues-yTest)**2)
rmse

train = dataFrame[:trainDataLength]
valid = dataFrame[trainDataLength:]
valid['Predictions'] = predictionValues
plt.title('Model')
plt.xlabel('Date')
plt.ylabel('Close Price USD ($)')
plt.plot(train['Close'])
plt.plot(valid[['Close', 'Predictions']])
plt.legend(['Train', 'Val', 'Predictions'], loc='lower right')
plt.show()